plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'signing'

    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'org.javamodularity.moduleplugin' version '1.8.13'
    id 'org.panteleyev.jpackageplugin' version '1.6.0'

    // https://github.com/gradlex-org/java-module-dependencies
    id 'org.gradlex.java-module-dependencies' version '1.6.4'
}

project.version = '3.0.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

testModuleInfo {
    requires('org.junit.jupiter.api')
    annotationProcessor('lombok')
}

dependencies {
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
application {
    // Define the main class for the application.
    mainModule = 'password.manager'
    mainClass = 'password.manager.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javafx {
    version = '22.0.1'
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.web' ]
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Password Manager', 'Main-Class': 'password.manager.App'
    }
    archiveBaseName.set(rootProject.name)
}

signing {
    sign jar
    sign distZip
    sign distTar
}

tasks.register('assemblePortables') {
    dependsOn('signDistZip', 'signDistTar')

    doLast {
        copy {
            from(layout.buildDirectory.dir('/distributions'))
            into(layout.projectDirectory.dir('/compiled/portable'))
        }
    }
}

tasks.register('copyJars', Copy) {
    dependsOn('compileJava', 'signJar')

    copy {
        from(configurations.runtimeClasspath, tasks.jar)
        into(layout.buildDirectory.dir('/jars'))
    }
}

jpackage {
    dependsOn('copyJars')

    // type = 'dmg'
    // type = 'pkg'
	// type = 'exe'
	// type = 'msi'
	// type = 'rpm'
	// type = 'deb'

    aboutUrl = 'https://github.com/Achille004/PasswordManager'
    appDescription = 'Password Manager is an application able to add, modify and delete locally saved accounts, characterized by a software, a username and an AES-encrypted password.'
    appName = 'Password Manager'
    appVersion = project.version
    copyright = 'Copyright (c) 2022-2024 Francesco Marras'
    destination = layout.projectDirectory.dir('/compiled/installer')
    icon =  layout.projectDirectory.file('/src/main/resources/locker.ico')
    javaOptions = ['-Dfile.encoding=UTF-8']
    licenseFile	= layout.projectDirectory.dir('/src/main/resources/license.txt')
    module = 'password.manager/password.manager.App'
    modulePaths = Arrays.asList('/build/jars')
    resourceDir = layout.projectDirectory.dir('/src/main/resources')
    runtimeImage = System.getProperty('java.home')
    vendor = 'Francesco Marras'
    
    windows {
        winConsole = false
        winDirChooser = true
        winHelpUrl = 'https://github.com/Achille004/PasswordManager'
        winMenu = true
        winMenuGroup = 'Francesco Marras'
        winShortcut = true
        winShortcutPrompt = true
    }

    mac {
        macAppCategory  = 'security'
        macAppStore = false
        macPackageIdentifier = 'PasswordManager-3.0.0'
        macPackageName = 'PasswordManager'
        macSigningKeyUserName = 'Francesco Marras'
    }

    linux {
        linuxAppCategory = 'security'
        linuxDebMaintainer = '2004marras@gmail.com'
        linuxMenuGroup = 'Francesco Marras'
        linuxRpmLicenseType = 'GPLv3'
        linuxShortcut = true
    }
}